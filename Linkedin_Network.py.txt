{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Installing Dependencies\n",
    "Before loading the data, we need to install some dependencies that donâ€™t come by default on Anaconda."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [],
   "source": [
    "!pip install pyjanitor pyvis --quiet"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import janitor\n",
    "import datetime\n",
    "from IPython.display import display, HTML\n",
    "from pyvis import network as net\n",
    "import networkx as nx"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Load the Data\n",
    "\n",
    "This is your 'connections.csv' file you downloaded from LinkedIn - the 'skiprows' allows you to skiprows that are not part of your data."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_ori = pd.read_csv(\"C:/Users/domin/OneDrive/Desktop/Connections.csv\", skiprows=3) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 263 entries, 0 to 262\n",
      "Data columns (total 6 columns):\n",
      " #   Column         Non-Null Count  Dtype \n",
      "---  ------         --------------  ----- \n",
      " 0   First Name     261 non-null    object\n",
      " 1   Last Name      261 non-null    object\n",
      " 2   Email Address  2 non-null      object\n",
      " 3   Company        260 non-null    object\n",
      " 4   Position       260 non-null    object\n",
      " 5   Connected On   263 non-null    object\n",
      "dtypes: object(6)\n",
      "memory usage: 12.5+ KB\n"
     ]
    }
   ],
   "source": [
    "df_ori.info()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Data Cleaning"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>company</th>\n",
       "      <th>position</th>\n",
       "      <th>connected_on</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Influur</td>\n",
       "      <td>Marketing Specialist</td>\n",
       "      <td>2023-02-10</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>FSI</td>\n",
       "      <td>Private Equity Investments</td>\n",
       "      <td>2022-12-05</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Tufts Medical Center</td>\n",
       "      <td>Program Coordinator</td>\n",
       "      <td>2022-11-29</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Muni Tienda</td>\n",
       "      <td>Key Account Manager</td>\n",
       "      <td>2022-11-19</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>eClerx</td>\n",
       "      <td>Financial Analyst</td>\n",
       "      <td>2022-11-18</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                company                    position connected_on\n",
       "0               Influur        Marketing Specialist   2023-02-10\n",
       "1                   FSI  Private Equity Investments   2022-12-05\n",
       "2  Tufts Medical Center         Program Coordinator   2022-11-29\n",
       "3           Muni Tienda         Key Account Manager   2022-11-19\n",
       "4                eClerx           Financial Analyst   2022-11-18"
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df = (\n",
    "    df_ori\n",
    "    .clean_names() # remove spacing and capitalization\n",
    "    .drop(columns=['first_name', 'last_name', 'email_address']) # drop for privacy\n",
    "    .dropna(subset=['company', 'position']) # drop missing values in company and position\n",
    "    .to_datetime('connected_on', infer_datetime_format=True)\n",
    "  )\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Simple EDA"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "df['company'].value_counts().head(10).plot(kind=\"barh\").invert_yaxis();"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "df['position'].value_counts().head(10).plot(kind=\"barh\").invert_yaxis();"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "df['connected_on'].hist(xrot=35, bins=15);"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Remove freelance and self-employed titles"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [],
   "source": [
    "pattern = \"freelance|self-employed\"\n",
    "df = df[~df['company'].str.contains(pattern, case=False)]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Aggregate sum of connections for companies"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>company</th>\n",
       "      <th>count</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Amazon Web Services (AWS)</td>\n",
       "      <td>63</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Amazon</td>\n",
       "      <td>8</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Google</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Rebura LTD.</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Microsoft</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>Glovo</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>Babson College</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>EY</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>Goldman Sachs</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>COFRA Holding AG</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                      company  count\n",
       "0   Amazon Web Services (AWS)     63\n",
       "1                      Amazon      8\n",
       "2                      Google      4\n",
       "3                 Rebura LTD.      3\n",
       "4                   Microsoft      3\n",
       "9                       Glovo      2\n",
       "13             Babson College      2\n",
       "12                         EY      2\n",
       "10              Goldman Sachs      2\n",
       "11           COFRA Holding AG      2"
      ]
     },
     "execution_count": 34,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_company = df['company'].value_counts().reset_index()\n",
    "df_company.columns = ['company', 'count']\n",
    "df_company = df_company.sort_values(by=\"count\", ascending=False)\n",
    "df_company.head(10)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Aggregate sum of connections for positions"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>position</th>\n",
       "      <th>count</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Business Analyst</td>\n",
       "      <td>6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Account Executive</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Territory Manager</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Co-Founder</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>Associate</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Account Manager</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>Product Manager</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>Enterprise Account Executive</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>Senior Business Development Representative</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>Analyst</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                     position  count\n",
       "0                            Business Analyst      6\n",
       "2                           Account Executive      5\n",
       "1                           Territory Manager      5\n",
       "3                                  Co-Founder      4\n",
       "6                                   Associate      3\n",
       "4                             Account Manager      3\n",
       "5                             Product Manager      3\n",
       "7                Enterprise Account Executive      2\n",
       "8  Senior Business Development Representative      2\n",
       "9                                     Analyst      2"
      ]
     },
     "execution_count": 35,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_position = df['position'].value_counts().reset_index()\n",
    "df_position.columns = ['position', 'count']\n",
    "df_position = df_position.sort_values(by=\"count\", ascending=False)\n",
    "df_position.head(10)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Creating the network"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(174, 2)\n",
      "(2, 2)\n"
     ]
    }
   ],
   "source": [
    "print(df_company.shape)\n",
    "df_company_reduced = df_company.loc[df_company['count']>=5]\n",
    "print(df_company_reduced.shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(229, 2)\n",
      "(3, 2)\n"
     ]
    }
   ],
   "source": [
    "print(df_position.shape)\n",
    "df_position_reduced = df_position.loc[df_position['count']>=5]\n",
    "print(df_position_reduced.shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [],
   "source": [
    "# initialize graph\n",
    "g = nx.Graph()\n",
    "g.add_node('Dominic') # intialize yourself as central\n",
    "\n",
    "# use iterrows tp iterate through the data frame\n",
    "for _, row in df_company_reduced.iterrows():\n",
    "\n",
    "  # store company name and count\n",
    "  company = row['company']\n",
    "  count = row['count']\n",
    "\n",
    "  title = f\"<b>{company}</b> â€“ {count}\"\n",
    "  positions = set([x for x in df[company == df['company']]['position']])\n",
    "  positions = ''.join('<li>{}</li>'.format(x) for x in positions)\n",
    "\n",
    "  position_list = f\"<ul>{positions}</ul>\"\n",
    "  hover_info = title + position_list\n",
    "\n",
    "  g.add_node(company, size=count*2, title=hover_info, color='#3449eb')\n",
    "  g.add_edge('root', company, color='grey')\n",
    "\n",
    "# generate the graph\n",
    "nt = net.Network(height='700px', width='700px', bgcolor=\"black\", font_color='white')\n",
    "nt.from_nx(g)\n",
    "nt.hrepulsion()\n",
    "# more customization https://tinyurl.com/yf5lvvdm\n",
    "nt.show('company_graph.html')\n",
    "#display(HTML('company_graph.html'))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}